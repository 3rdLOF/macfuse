#summary Setting up MacFUSE on your Mac OS X system.

= Introduction =

This document briefly describes the steps you need to take to get a MacFUSE development environment set up starting from scratch.

*NB* If you don't wish to compile everything yourself (you shouldn't have to, unless you want to do development of MacFUSE itself), you have the option of using a precompiled version available under the Downloads tab of this project's Google Code page (http://code.google.com/p/macfuse/downloads/list). Please read the [QUICKER_START_GUIDE] document to get started with MacFUSE the fastest way.

= Setting Up MacFUSE Core =

The MacFUSE subversion repository is located at:

http://code.google.com/p/macfuse/

You can anonymously check out the latest project source code as follows:

`svn checkout http://macfuse.googlecode.com/svn/trunk/ macfuse`

If you have developer access to the repository, you can do the following:

`svn checkout https://macfuse.googlecode.com/svn/trunk macfuse --username <user>`

*NB*: The current MacFUSE source tree has only been compiled with Xcode 2.4.x. To avoid mysterious compilation and runtime failures, please upgrade to Xcode 2.4.x (a free download from Apple). Newer versions of Xcode should work too.

==1. Compile MacFUSE Core ==

Compiling MacFUSE Core, the software atop which all MacFUSE file systems run, is no longer a complex process. Once you have the source tree checked out, you just need to run a single command from the appropriate directory, for example:

{{{
$ cd macfuse/core/
$ sudo ./build_macfuse.sh # must be run as root to chmod/chown output correctly
...
}}}

This will compile the kernel extension, the user-space library (`libfuse`), the mount utility (`mount_fusefs`), the load utility (`load_fusefs`), and will create the file system bundle (`fusefs.fs`). If everything goes fine, a ready-to-install Universal package can be found in `/tmp/macfuse-core-<OS version>-<MacFUSE version>`. For example, if you compile MacFUSE version 0.5 on Mac OS X 10.5, the package will be generated at:

{{{
/tmp/macfuse-core-10.5-0.5.0/MacFUSE Core.pkg
}}}

You can install this package by double clicking on it or through the command line:

{{{
$ sudo installer -pkg "MacFUSE Core.pkg" -target /
...
}}}

= Setting Up Other MacFUSE-Related Software =

If you wish to write a new MacFUSE-based file system on Mac OS X, you should be good to go. If you wish to compile `sshfs` or other FUSE-based file systems from the Linux world, you'll find that several of them depend upon `glib`. Therefore, it might be useful to just install a few other packages that are typically available on Linux but not on Mac OS X by default.

*NB*: The `sshfs` binary package available from this project's website contains an `sshfs-static` binary that is statically linked against `glib` (but dynamically linked against `libfuse`). If you wish to quickly try out `sshfs`, you can just install the MacFUSE Core package and use `sshfs-static` without having to compile anything.

==1. Install pkg-config==

`pkg-config` is an open source helper tool used when compiling applications and libraries. You don't *need* pkg-config to run MacFUSE, but if you're going to be compiling existing FUSE file systems (those that were written for Linux), having `pkg-config` will be helpful in many cases. To download its source and learn more about it, go here:

http://pkgconfig.freedesktop.org/wiki/

To compile and install `pkg-config` as a set of Universal binaries, do the following:

{{{
$ tar -xzvf pkg-config-<version>.gz
$ cd pkg-config-<version>/
$ CFLAGS="-O -g -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk" LDFLAGS="-arch i386 -arch ppc" ./configure --prefix=/usr/local --disable-dependency-tracking
$ make
$ sudo make install
}}}

This installs `pkg-config` under the `/usr/local/` hierarchy.

==2. Install glib==

Some FUSE-based file systems depend on `glib`, which is not available by default on Mac OS X.  You don't *need* `glib` to run MacFUSE, but if you're going to be compiling existing FUSE file systems (those that were written for Linux), having `glib` will be required in some cases. To compile `glib` without pain, you should also have the GNU `gettext` package installed.

You can download `gettext` from:

ftp://ftp.gnu.org/pub/gnu/gettext/

You can compile gettext (Universally) as follows:

{{{
$ tar -xzvf gettext-0.16.1.tar.gz
$ cd gettext-0.16.1
$ CFLAGS="-O0 -g -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk" LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc -fno-common" ./configure --prefix=/usr/local --disable-dependency-tracking --with-libiconv-prefix=/Developer/SDKs/MacOSX10.4u.sdk/usr
$ make
$ sudo make install
}}}

You can download `glib` from:

ftp://ftp.gtk.org/pub/glib/

You can compile `glib` (Universally) as follows:

{{{
$ tar -xzvf glib-2.14.tar.gz
$ cd glib-2.14
$ CFLAGS="-O0 -g -D_POSIX_C_SOURCE=200112L -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk -I/usr/local/include" LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc -L/usr/local/lib" ./configure --prefix=/usr/local --disable-dependency-tracking --enable-static
}}}

If you are on a *PowerPC* Macintosh, comment out one line in `config.h`: `// #define G_ATOMIC_POWERPC 1`

Continuing on any Macintosh (x86 or PowerPC -- not tested on ARM yet :-)), open glibconfig.h and locate the line that begins with `#define G_BYTE_ORDER`... replace it with this code block:

{{{
#if (4 != sizeof(long))
#error no support for 64-bit compiles
#endif
#ifdef __LITTLE_ENDIAN__
#define G_BYTE_ORDER G_LITTLE_ENDIAN
#elif defined(__BIG_ENDIAN__)
#define G_BYTE_ORDER G_BIG_ENDIAN
#else
#error neither __LITTLE_ENDIAN__ nor __BIG_ENDIAN__ #defined
#endif
}}}

Now open the file `libtool` and locate the lines (I see two of them) that begin with `sys_lib_search_path_spec=`... replace the entire line (in both cases) with:

{{{
sys_lib_search_path_spec=" /Developer/SDKs/MacOSX10.4u.sdk/usr/lib/ /usr/local/lib"
}}}

Now, back in the terminal:
{{{
$ make
$ sudo make install
}}}

At this point, you should be able to do the following:

{{{
$ pkg-config --list-all
...
gmodule-export-2.0    GModule - Dynamic module loader for GLib
gmodule-2.0           GModule - Dynamic module loader for GLib
glib-2.0              GLib - C Utility Library
gobject-2.0           GObject - GLib Type, Object, Parameter and Signal Library
gthread-2.0           GThread - Thread support for GLib
gmodule-no-export-2.0 GModule - Dynamic module loader for GLib
fuse                  fuse - File System in User Space (MacFUSE)
}}}

Now you should also be able to compile many generally available FUSE file systems. Let us look at `sshfs`.

==3. Install sshfs==

`sshfs` source can be downloaded from:

http://fuse.sourceforge.net/sshfs.html

You'll need to patch the source using an appropriate Mac OS X patch file available in the `filesystems/sshfs/` subdirectory in the MacFUSE subversion repository.
   
{{{
$ tar -xzvf sshfs-fuse-1.8.tar.gz # unpack sshfs source
$ cd sshfs-fuse-1.8
$ patch -p1 < /path/to/sshfs-fuse-1.8-macosx.patch # apply patch with a matching version
...
$ /bin/sh ./darwin_configure.sh # run MacFUSE configure script
...
$ make
...
$ sudo make install
}}}

This will install the `sshfs` command-line program under `/usr/local/bin/`.

*NB*: The `sshfs` binary package available from this project's website contains an `sshfs-static` binary that is statically linked against `glib` (but dynamically linked against `libfuse`). If you wish to quickly try out `sshfs`, you can just install the MacFUSE Core package and use `sshfs-static` without having to compile anything.

= Compiling FUSE File Systems =

Many existing FUSE file systems are readily usable on Mac OS X with MacFUSE. Some might have additional dependencies (typically open source libraries that might not be already installed on your Mac OS X machine), which you have to satisfy before compiling and using the file system in question.

When running the configure script for a file system, you *need* to have `-D__FreeBSD__=10` in `CFLAGS`. This is critical!
 
 
 
 
 
 