#summary Frequently Asked Questions (and Answers)
#labels Featured

= What is it? =

*Q: What is MacFUSE? Is it the same as FUSE on Linux?*

MacFUSE is software that allows you to write arbitrary file systems as user-space programs. A crude way to look at this would be to think of MacFUSE as something that makes Mac OS X work like a _microkernel_ for the purpose of writing/running file systems. MacFUSE has two major components: an in-kernel loadable file system and a user-space library (`libfuse`). The in-kernel file system is specific to Mac OS X and is not based on Linux FUSE. (Some of its code is based on the FreeBSD version of FUSE.) The user-space library is a port of the Linux FUSE library, but has been heavily modified and extended to support Mac OS X specific features and nuances. From a user-space file system developer's standpoint, the API provided by the MacFUSE version of `libfuse` is almost identical to that on Linux.

*Q: What is "MacFUSE Core"?*

A: MacFUSE Core is the official distribution of fundamental MacFUSE software you need to use other software built atop MacFUSE. MacFUSE Core consists of the MacFUSE file system bundle (`fusefs.fs`) and the user-space libraries/headers. Besides bundle metadata, the file system bundle contains the MacFUSE kernel extension (`fusefs.kext`), the MacFUSE mount utility (`mount_fusefs`), and the extension loading utility (`load_fusefs`).
= Install/Uninstall =

*Q: What is the preferred way to install MacFUSE Core?*

A: The preferred way is to install the `MacFUSE Core.pkg` from the latest `MacFUSE Core.dmg` available from the Downloads tab of:

http://code.google.com/p/macfuse/

*Q: How can I uninstall MacFUSE Core?*

A: It depends on the MacFUSE version and the operating system version. Beginning with MacFUSE Core 0.4.0, you can use the `uninstall-macfuse-core.sh` script that resides in the `Support` subdirectory of the MacFUSE file system bundle. The bundle itself resides in `/System/Library/Filesystems/` on Mac OS X 10.4.x and in `/Library/Filesystems/` on Mac OS X 10.5.x.

For example, to uninstall MacFUSE on Mac OS X 10.4.x, you would run the following command in the Terminal:

{{{
sudo /System/Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh
}}}

To uninstall MacFUSE on Mac OS X 10.5.x, you would run:

{{{
sudo /Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh
}}}

If the file system bundle in your MacFUSE installation doesn't have a `Support` subdirectory, that means you have a "really old" version of MacFUSE. Please look for the uninstall script within the `fusefs.fs/` directory itself.

= ntfs-3g =

*Q: Why is ntfs-3g's write performance so poor with MacFUSE on OS X?

A: The ntfs-3g program opens and does I/O to the block device (`/dev/diskN`) of the NTFS volume in question. *Mac OS X* does not have a VM buffer cache for block devices when they are accessed in this way. That's the most overwhelming factor, because both metadata operations and file data I/O boil down to read/writes by ntfs-3g to the block device.

Suppose we somehow automagically provided unified buffer caching for block devices by essentially making a disk look like a giant file. Even then, OS X and its buffer cache is really happy only when you do I/O that is in units of page size (4KB) and aligned on a page boundary. To get the most out of the I/O subsystem in OS X, ntfs-3g (or any other program for that matter) would really want to do I/O in multiples of 4KB.

For comparison, you should try writing to an NTFS _disk image_--you will see that it's considerably faster because you do have some caching in that case.

* Q: After installing MacFUSE, I can't mount any disk images, optical discs, etc. What's going on?*

A: It's likely that you installed a broken ntfs-3g package you found on the Internet. Try removing the `/System/Library/Filesystems/ntfs-3g.fs/` directory. 

= sshfs =

*Q: I'm using sshfs and changed a file "externally" (not through sshfs/MacFUSE) on the server, but in the sshfs volume, I'm not seeing the changes. In fact, when I copy the file through sshfs, I get the old content, etc.

A: MacFUSE itself isn't a distributed remote file system! If you change things "externally" to MacFUSE (like, a file on the remote server in the case of sshfs), in general, things need to be done proactively to tell MacFUSE that something has changed, otherwise you'll get such "incorrect" behavior. For one, if you want this mode of operation (where you can change things remotely at any time) to work better, you should disable caching in sshfs (look at the various `-o cache` options in sshfs, in particular, `-o cache=no`).

Then, additionally, you need to tell MacFUSE not to cache things on its end too. You can use the `-o nolocalcaches` option, which turns off readaheads, the unified buffer cache, and the pathname resolution cache (all in the kernel). At the cost of some overhead, which could be substantial in certain cases, this will give you the behavior where most requests will have to go to the server and will therefore have more up-to-date information.

An example command line for this mode of operation could look like the following:

{{{
$ sshfs user@host:/dir /tmp/ssh -ocache=no -onolocalcaches -ovolname=ssh
}}}

If you are developing a MacFUSE file system and you want to handle such scenarios better within your file system, you should find out about the `FUSEALTERVNODEFORINODE` family of ioctls (see `common/fuse_ioctl.h` in the kernel source for MacFUSE).
 
= Various Usage Questions =

*Q: How should I unmount my fuse-based filesystem? I can't find the `fusermount` program anywhere.*

A: Just use the standard `umount` command in Mac OS X. You don't need the Linux-specific `fusermount` with MacFUSE.

*Q: All my filesystems are showing up in the Finder as "MacFUSE Volume n (X)" for some number n and some file system type X. What should I do?*

A: Use the `volname` command-line option. See [OPTIONS] for details.

= Compiling a FUSE File System =

*Q: I'm having problem XYZ compiling a FUSE file system in the MacFUSE environment. What to do?*

A: Besides any other file-system-specific compile- or configure-time options, you need to have `-D__FreeBSD__=10` in your `CFLAGS`. Try something like:

{{{
$ CFLAGS="-D__FreeBSD__=10" ./configure --prefix=/usr/local
}}}

You may also need `-D_FILE_OFFSET_BITS=64` in `CFLAGS` unless it's already there.

MacFUSE Core installs a `fuse.pc` file in `/usr/local/lib/pkgconfig/`. This, in conjunction with the `pkg-config` program, will automatically cause `-D__FreeBSD__=10 -D_FILE_OFFSET_BITS=64` to be included in `CFLAGS`. If your particular installation of `pkg-config` (say, through Fink or Mac Ports) doesn't look under `/usr/local/lib/pkgconfig/` by default, you can set the environment variable `PKG_CONFIG_PATH` to `/usr/local/lib/pkgconfig`.