#labels Featured
##summary Frequently Asked Questions (and Answers)

= ntfs-3g is Slow =

*Q: Why is ntfs-3g's write performance so poor with MacFUSE on OS X?

A: The ntfs-3g program opens and does I/O to the block device (`/dev/diskN`) of the NTFS volume in question. *Mac OS X* does not have a VM buffer cache for block devices when they are accessed in this way. That's the most overwhelming factor, because both metadata operations and file data I/O boil down to read/writes by ntfs-3g to the block device.

Suppose we somehow automagically provided unified buffer caching for block devices by essentially making a disk look like a giant file. Even then, OS X and its buffer cache is really happy only when you do I/O that is in units of page size (4KB) and aligned on a page boundary. To get the most out of the I/O subsystem in OS X, ntfs-3g (or any other program for that matter) would really want to do I/O in multiples of 4KB.

For comparison, you should try writing to an NTFS /disk image/--you will see that it's considerably faster because you do have some caching in that case. 

= Picking Up "Remote" Changes =

*Q: I'm using sshfs and changed a file "externally" (not through sshfs/MacFUSE) on the server, but in the sshfs volume, I'm not seeing the changes. In fact, when I copy the file through sshfs, I get the old content, etc.

A: MacFUSE itself isn't a distributed remote file system! If you change things "externally" to MacFUSE (like, a file on the remote server in the case of sshfs), in general, things need to be done proactively to tell MacFUSE that something has changed, otherwise you'll get such "incorrect" behavior. For one, if you want this mode of operation (where you can change things remotely at any time) to work better, you should disable caching in sshfs (look at the various `-o cache` options in sshfs, in particular, `-o cache=no`).

Then, additionally, you need to tell MacFUSE not to cache things on its end too. Beginning with MacFUSE Core 0.2.0, you can use the `-o nolocalcaches` option, which turns off readaheads in the kernel, the unified buffer cache, and the pathname resolution cache in the kernel. At the cost of a little overhead, this will give you the behavior where most requests will have to go to the server and will therefore have more up-to-date information.

An example command line for this mode of operation could look like the following:

{{{
$ sshfs user@host:/dir /tmp/ssh -ocache=no -onolocalcaches -oping_diskarb,volname=ssh
}}}

Note that beginning with MacFUSE Core 0.2.5, the `ping_diskarb` option is enabled automatically (you can still specify it for backward compatibility). There is also a new option `noping_diskarb` that you can use to turn off the effect of `ping_diskarb`.
 
= Install/Uninstall =

*Q: What is the preferred way to install MacFUSE?*

A: Most users and developers of FUSE file systems should install the "MacFUSE Core.pkg" from the latest MacFUSE Core dmg available from the Downloads tab of:

http://code.google.com/p/macfuse/

*Q: How can I uninstall MacFUSE Core?*

A: Assuming you installed a version of "MacFUSE Core.pkg", beginning with version 0.4.0, you can run (from a Terminal window) the provided uninstall script to uninstall MacFUSE as follows:

{{{
sudo /System/Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh
}}}

If you have a version of MacFUSE between 0.1.9 and 0.3.0 (both inclusive), the location of the uninstall script is different. You need to run:

{{{
sudo /System/Library/Filesystems/fusefs.fs/uninstall-macfuse-core.sh
}}}

If you have the ancient 0.1.0b006 or 0.1.7 release installed then it might be easiest to upgrade to the newest release and then run the uninstall script.

= Mounting / Unmounting / Ejecting =

*Q: I can't eject a MacFUSE volume using the eject icon in the Finder. What to do?*

A: Are you using an older release of MacFUSE? If so, please upgrade to the latest. MacFUSE's interaction with the Finder improved greatly in MacFUSE Core 0.1.9. Before MacFUSE Core 0.2.5, to get better Finder interaction, you had to use the `-oping_diskarb` command-line option while mounting a file system from the command line. If using a GUI wrapper, the GUI had do this for you (or perform some other action that keeps the Finder in the loop). Beginning with MacFUSE Core 0.2.5, the `ping_diskarb` option is enabled automatically (you can still specify it for backward compatibility). There is also a new option `noping_diskarb` that you can use to turn off the effect of `ping_diskarb`.

If the Finder is "beachballing" because the user-space file system has lost network connectivity, etc., then you can `kill -TERM` (or `kill -KILL`, if the need be) the file system process, which will cause the volume to be ejected.

*Q: How should I unmount my fuse-based filesystem? I can't find `fusermount` anywhere.*

A: Just use the standard `umount` command in Mac OS X. You don't need `fusermount` with MacFUSE.

*Q: When trying to use a fuse-based filesystem, I get:*

{{{
fuse: failed to exec mount program: No such file or directory
}}}

A: Are you using an older release of MacFUSE? If so, please upgrade to the latest. You shouldn't see this error in releases beginning with MacFUSE 0.1.7. If you *do* see this error with a newer release, that means the program you are trying to run is "picking up" an older user library that still wants `mount_fusefs` to be in your `PATH`.

*Q: All my filesystems are showing up in the Finder as "FUSE Volume n" for some number n. What should I do?*

A: Use the command-line option `-ovolname=<<some name>>` as well as `-oping_diskarb`. 'volname' sets a name for the volume, and `ping_diskarb` causes it to appear on the Desktop and in the Finder. This way, you can also eject the volume through the Finder.

Note that beginning with MacFUSE Core 0.2.5, the `ping_diskarb` option is enabled automatically (you can still specify it for backward compatibility). There is also a new option `noping_diskarb` that you can use to turn off the effect of `ping_diskarb`.

= Finder "Beachballing" When SSH Connection Drops/Resets/Changes =

*Q: When I have an SSHFS volume mounted and something happens to the connection (or my computer wakes up from sleep), the Finder beachballs. Can I do something about this?*

A: Try using the `-o reconnect` option to `sshfs`. MacFUSE Core 0.1.9 introduced better Finder interaction, along with the `-o daemon_timeout` option that lets you specify a hard upper limit after which a "hung" volume will be automatically ejected. You can also try to kill the file system process (`sshfs`, in this case) -- you might have to `kill -9`. Beginning with MacFUSE Core 0.2.5, there is a default daemon timeout of 10 seconds, along with a graphical alert panel that lets the user decide whether to continue waiting or to eject the volume.

= NTFS Volume Stops Showing Up in Startup Disk Preference Pane =

* Q: After installing MacFUSE, my NTFS volume doesn't show up in the Startup Disk preference pane. What's going on?*

A: This issue is fixed beginning with MacFUSE Core 0.1.9. If you want to fix an older release for some reason, find the following line in `/System/Library/Filesystems/fusefs.fs/Contents/Info.plist`:

{{{
    ...
    <key>NTFS</key>
    ...
}}}

Change the "NTFS" to "NTFS-3g", so that it reads:

{{{
    ...
    <key>NTFS-3g</key>
    ...
}}}

You'll need administrator privileges to edit this file. Quit and relaunch System Preferences.

A related question could be that the volume shows up in Disk Utility as of type "NTFS 3g" or similar. It's the same issue, and can be remedied by the abovementioned change.

Note that besides MacFUSE's fusefs.fs bundle, another non-Apple .fs bundle could be "taking over" the NTFS personality too -- so make sure.

= Compiling a FUSE File System =

*Q: I'm having problem XYZ compiling a FUSE file system in the MacFUSE environment. What to do?*

A: Besides any other file-system-specific compile- or configure-time options, you need to have `-D__FreeBSD__=10` in your `CFLAGS`. Try something like:

{{{
$ CFLAGS="-D__FreeBSD__=10" ./configure --prefix=/usr/local
}}}

You may also need `-D_FILE_OFFSET_BITS=64` in `CFLAGS` unless it's already there.

MacFUSE Core installs a `fuse.pc` file in `/usr/local/lib/pkgconfig/`. This, in conjunction with the `pkg-config` program, will automatically cause `-D__FreeBSD__=10 -D_FILE_OFFSET_BITS=64` to be included in `CFLAGS`. If your particular installation of `pkg-config` (say, through Fink or Mac Ports) doesn't look under `/usr/local/lib/pkgconfig/` by default, you can set the environment variable `PKG_CONFIG_PATH` to `/usr/local/lib/pkgconfig`.